# Docker Compose Configuration for TubeGenie Backend
# 
# Quick Start:
#   1. Copy .env.example to .env and fill in your values
#   2. Run: docker-compose up -d
#   3. Access API at http://localhost:5000
#   4. View logs: docker-compose logs -f api
#   5. Stop: docker-compose down
#
# Production:
#   Use: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
#   (Uses MongoDB Atlas instead of local MongoDB)

version: '3.8'

services:
  # TubeGenie Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tubegenie-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    env_file:
      - .env.docker
    environment:
      # Server Configuration
      NODE_ENV: production
      PORT: 5000
      
      # Clerk Authentication (set these in production)
      CLERK_PUBLISHABLE_KEY: ${CLERK_PUBLISHABLE_KEY}
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}
      
      # MongoDB Connection (uses mongodb service below or external Atlas)
      MONGODB_URI: ${MONGODB_URI:-mongodb://mongodb:27017/TubeGenie}
      
      # OpenRouter AI
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      
      # Site Information
      SITE_URL: ${SITE_URL:-http://localhost:5000}
      SITE_NAME: ${SITE_NAME:-TubeGenie}
      
      # Frontend URL for CORS
      FRONTEND_URL: ${FRONTEND_URL:-https://tubegenie-frontend.vercel.app}
      
      # API URL
      API_URL: ${API_URL:-http://localhost:5000}
    depends_on:
      - mongodb
    networks:
      - tubegenie-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Database (optional, use MongoDB Atlas for production)
  mongodb:
    image: mongo:7
    container_name: tubegenie-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-changeme}
      MONGO_INITDB_DATABASE: TubeGenie
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - tubegenie-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  tubegenie-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
