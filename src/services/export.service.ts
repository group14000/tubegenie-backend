import PDFDocument from 'pdfkit';
import { stringify } from 'csv-stringify/sync';
import { IContent } from '../models/Content';

type PDFDoc = typeof PDFDocument.prototype;

export class ExportService {
  /**
   * Generate PDF document from content
   * @param content - Content to export
   * @returns PDFDocument stream
   */
  generatePDF(content: IContent): PDFDoc {
    const doc = new PDFDocument({
      size: 'A4',
      margin: 50,
    });

    // Title
    doc.fontSize(24)
      .fillColor('#2563eb')
      .text('TubeGenie - YouTube Content Export', { align: 'center' })
      .moveDown();

    // Topic
    doc.fontSize(18)
      .fillColor('#1e293b')
      .text(`Topic: ${content.topic}`, { underline: true })
      .moveDown();

    // AI Model Used
    doc.fontSize(10)
      .fillColor('#64748b')
      .text(`Generated by: ${content.aiModel}`)
      .text(`Created: ${new Date(content.createdAt).toLocaleString()}`)
      .moveDown(1.5);

    // Video Titles
    doc.fontSize(14)
      .fillColor('#0f172a')
      .text('Video Title Options:', { underline: true })
      .moveDown(0.5);
    
    doc.fontSize(11)
      .fillColor('#334155');
    content.titles.forEach((title, index) => {
      doc.text(`${index + 1}. ${title}`, { indent: 20 })
        .moveDown(0.3);
    });
    doc.moveDown(0.7);

    // Description
    doc.fontSize(14)
      .fillColor('#0f172a')
      .text('Video Description:', { underline: true })
      .moveDown(0.5);
    
    doc.fontSize(11)
      .fillColor('#334155')
      .text(content.description, { align: 'justify', indent: 20 })
      .moveDown();

    // Tags
    doc.fontSize(14)
      .fillColor('#0f172a')
      .text('Tags:', { underline: true })
      .moveDown(0.5);
    
    doc.fontSize(11)
      .fillColor('#334155')
      .text(content.tags.join(', '), { indent: 20 })
      .moveDown();

    // Thumbnail Ideas
    doc.fontSize(14)
      .fillColor('#0f172a')
      .text('Thumbnail Ideas:', { underline: true })
      .moveDown(0.5);
    
    doc.fontSize(11)
      .fillColor('#334155');
    content.thumbnailIdeas.forEach((idea, index) => {
      doc.text(`${index + 1}. ${idea}`, { indent: 20 })
        .moveDown(0.3);
    });
    doc.moveDown(0.7);

    // Script Outline
    doc.fontSize(14)
      .fillColor('#0f172a')
      .text('Script Outline:', { underline: true })
      .moveDown(0.5);
    
    doc.fontSize(11)
      .fillColor('#334155');
    content.scriptOutline.forEach((section, index) => {
      doc.text(`${index + 1}. ${section}`, { indent: 20 })
        .moveDown(0.3);
    });

    // Footer
    doc.moveDown(2);
    doc.fontSize(8)
      .fillColor('#94a3b8')
      .text('Generated by TubeGenie - AI-Powered YouTube Content Creator', {
        align: 'center',
      });

    // Finalize PDF
    doc.end();

    return doc;
  }

  /**
   * Generate CSV from content
   * @param content - Single content or array of content to export
   * @returns CSV string
   */
  generateCSV(content: IContent | IContent[]): string {
    const contents = Array.isArray(content) ? content : [content];

    const records = contents.map(item => ({
      'Content ID': (item._id as any).toString(),
      'Topic': item.topic,
      'Title 1': item.titles[0] || '',
      'Title 2': item.titles[1] || '',
      'Title 3': item.titles[2] || '',
      'Description': item.description,
      'Tags': item.tags.join(', '),
      'Thumbnail 1': item.thumbnailIdeas[0] || '',
      'Thumbnail 2': item.thumbnailIdeas[1] || '',
      'Thumbnail 3': item.thumbnailIdeas[2] || '',
      'Script Outline': item.scriptOutline.join(' | '),
      'AI Model': item.aiModel,
      'Is Favorite': item.isFavorite ? 'Yes' : 'No',
      'Created At': new Date(item.createdAt).toLocaleString(),
    }));

    const csv = stringify(records, {
      header: true,
      quoted: true,
    });

    return csv;
  }

  /**
   * Generate plain text format for clipboard
   * @param content - Content to format
   * @returns Formatted text string
   */
  generatePlainText(content: IContent): string {
    const lines: string[] = [];

    lines.push('='.repeat(60));
    lines.push(`TOPIC: ${content.topic}`);
    lines.push('='.repeat(60));
    lines.push('');

    lines.push('VIDEO TITLE OPTIONS:');
    content.titles.forEach((title, index) => {
      lines.push(`  ${index + 1}. ${title}`);
    });
    lines.push('');

    lines.push('VIDEO DESCRIPTION:');
    lines.push(content.description);
    lines.push('');

    lines.push('TAGS:');
    lines.push(content.tags.join(', '));
    lines.push('');

    lines.push('THUMBNAIL IDEAS:');
    content.thumbnailIdeas.forEach((idea, index) => {
      lines.push(`  ${index + 1}. ${idea}`);
    });
    lines.push('');

    lines.push('SCRIPT OUTLINE:');
    content.scriptOutline.forEach((section, index) => {
      lines.push(`  ${index + 1}. ${section}`);
    });
    lines.push('');

    lines.push('-'.repeat(60));
    lines.push(`Generated by: ${content.aiModel}`);
    lines.push(`Created: ${new Date(content.createdAt).toLocaleString()}`);
    lines.push('-'.repeat(60));

    return lines.join('\n');
  }

  /**
   * Generate markdown format
   * @param content - Content to format
   * @returns Markdown string
   */
  generateMarkdown(content: IContent): string {
    const lines: string[] = [];

    lines.push(`# ${content.topic}`);
    lines.push('');

    lines.push('## Video Title Options');
    content.titles.forEach((title, index) => {
      lines.push(`${index + 1}. ${title}`);
    });
    lines.push('');

    lines.push('## Video Description');
    lines.push(content.description);
    lines.push('');

    lines.push('## Tags');
    lines.push(content.tags.map(tag => `\`${tag}\``).join(', '));
    lines.push('');

    lines.push('## Thumbnail Ideas');
    content.thumbnailIdeas.forEach((idea, index) => {
      lines.push(`${index + 1}. ${idea}`);
    });
    lines.push('');

    lines.push('## Script Outline');
    content.scriptOutline.forEach((section, index) => {
      lines.push(`${index + 1}. ${section}`);
    });
    lines.push('');

    lines.push('---');
    lines.push(`*Generated by ${content.aiModel} on ${new Date(content.createdAt).toLocaleString()}*`);

    return lines.join('\n');
  }
}

export const exportService = new ExportService();
